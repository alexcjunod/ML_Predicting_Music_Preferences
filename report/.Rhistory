library(reticulate)
library(here)
library(dplyr)
library(tidyr)
library(reticulate)
library(here)
library(dplyr)
library(tidyr)
# Check if the "spotify_env" Conda environment exists
if (!"spotify_env" %in% conda_list()$name) {
# Create a new Conda environment if it does not exist
conda_create("spotify_env")
}
conda_version()
# Ensure Conda is updated and visible
if (!"conda" %in% py_discover_config()$conda) {
stop("Conda is not installed or not added to PATH")
}
# Ensure Conda is updated and visible
if (!"conda" %in% py_discover_config()$conda) {
stop("Conda is not installed or not added to PATH")
}
spotipy_script <- "
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pandas as pd
client_id = '6a91a1da7e484e659532888e8ab5f8e2'
client_secret = '9e57ca7e029c43caa47f77fe321a8767'
client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
playlist_link = 'https://open.spotify.com/playlist/5s4m4kmikUzGf4LvX1Lms7'
playlist_URI = playlist_link.split('/')[-1].split('?')[0]
data = []
for track in sp.playlist_tracks(playlist_URI)['items']:
track_details = track['track']
track_uri = track_details['uri']
track_name = track_details['name']
artist_uri = track_details['artists'][0]['uri']
artist_info = sp.artist(artist_uri)
album_info = sp.album(track_details['album']['uri'])
audio_features = sp.audio_features(track_uri)[0]
audio_analysis = sp.audio_analysis(track_uri)
avg_segment_duration = sum(seg['duration'] for seg in audio_analysis['segments']) / len(audio_analysis['segments'])
avg_segment_loudness = sum(seg['loudness_max'] for seg in audio_analysis['segments']) / len(audio_analysis['segments'])
avg_segment_timbre = [sum(seg['timbre'][i] for seg in audio_analysis['segments']) / len(audio_analysis['segments']) for i in range(12)]
avg_section_tempo = sum(section['tempo'] for section in audio_analysis['sections']) / len(audio_analysis['sections'])
if audio_features:
track_data = {
'Track URI': track_uri,
'Track Name': track_name,
'Artist URI': artist_uri,
'Artist Name': track_details['artists'][0]['name'],
'Artist Popularity': artist_info['popularity'],
'Artist Genres': ', '.join(artist_info['genres']),
'Artist Followers': artist_info['followers']['total'],
'Album Name': track_details['album']['name'],
'Album Popularity': album_info['popularity'],
'Release Date': album_info['release_date'],
'Track Popularity': track_details['popularity'],
'Explicit': track_details['explicit'],
'Danceability': audio_features['danceability'],
'Energy': audio_features['energy'],
'Key': audio_features['key'],
'Loudness': audio_features['loudness'],
'Mode': audio_features['mode'],
'Speechiness': audio_features['speechiness'],
'Acousticness': audio_features['acousticness'],
'Instrumentalness': audio_features['instrumentalness'],
'Liveness': audio_features['liveness'],
'Valence': audio_features['valence'],
'Tempo': audio_features['tempo'],
'Duration_ms': audio_features['duration_ms'],
'Time Signature': audio_features['time_signature'],
'Average Segment Duration': avg_segment_duration,
'Average Segment Loudness': avg_segment_loudness,
'Average Segment Timbre': avg_segment_timbre,
'Average Section Tempo': avg_section_tempo
}
data.append(track_data)
df = pd.DataFrame(data)
df.to_csv('spotify_playlist_data_enriched.csv', index=False)
print(df.head())
"
# Run the Python script in R
py_run_string(spotipy_script)
install.packages("reticulate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reticulate")
library(reticulate)
library(here)
library(dplyr)
library(tidyr)
install.packages("reticulate")
library(reticulate)
# Create a new Conda environment
conda_create("spotify_env")
library(reticulate)
# Create a new Conda environment
conda_create("spotify_env")
# Create a new Conda environment
conda_create("spotify_env")
spotipy_script <- "
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pandas as pd
client_id = '6a91a1da7e484e659532888e8ab5f8e2'
client_secret = '9e57ca7e029c43caa47f77fe321a8767'
client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
playlist_link = 'https://open.spotify.com/playlist/5s4m4kmikUzGf4LvX1Lms7'
playlist_URI = playlist_link.split('/')[-1].split('?')[0]
data = []
for track in sp.playlist_tracks(playlist_URI)['items']:
track_details = track['track']
track_uri = track_details['uri']
track_name = track_details['name']
artist_uri = track_details['artists'][0]['uri']
artist_info = sp.artist(artist_uri)
album_info = sp.album(track_details['album']['uri'])
audio_features = sp.audio_features(track_uri)[0]
audio_analysis = sp.audio_analysis(track_uri)
avg_segment_duration = sum(seg['duration'] for seg in audio_analysis['segments']) / len(audio_analysis['segments'])
avg_segment_loudness = sum(seg['loudness_max'] for seg in audio_analysis['segments']) / len(audio_analysis['segments'])
avg_segment_timbre = [sum(seg['timbre'][i] for seg in audio_analysis['segments']) / len(audio_analysis['segments']) for i in range(12)]
avg_section_tempo = sum(section['tempo'] for section in audio_analysis['sections']) / len(audio_analysis['sections'])
if audio_features:
track_data = {
'Track URI': track_uri,
'Track Name': track_name,
'Artist URI': artist_uri,
'Artist Name': track_details['artists'][0]['name'],
'Artist Popularity': artist_info['popularity'],
'Artist Genres': ', '.join(artist_info['genres']),
'Artist Followers': artist_info['followers']['total'],
'Album Name': track_details['album']['name'],
'Album Popularity': album_info['popularity'],
'Release Date': album_info['release_date'],
'Track Popularity': track_details['popularity'],
'Explicit': track_details['explicit'],
'Danceability': audio_features['danceability'],
'Energy': audio_features['energy'],
'Key': audio_features['key'],
'Loudness': audio_features['loudness'],
'Mode': audio_features['mode'],
'Speechiness': audio_features['speechiness'],
'Acousticness': audio_features['acousticness'],
'Instrumentalness': audio_features['instrumentalness'],
'Liveness': audio_features['liveness'],
'Valence': audio_features['valence'],
'Tempo': audio_features['tempo'],
'Duration_ms': audio_features['duration_ms'],
'Time Signature': audio_features['time_signature'],
'Average Segment Duration': avg_segment_duration,
'Average Segment Loudness': avg_segment_loudness,
'Average Segment Timbre': avg_segment_timbre,
'Average Section Tempo': avg_section_tempo
}
data.append(track_data)
df = pd.DataFrame(data)
df.to_csv('spotify_playlist_data_enriched.csv', index=False)
print(df.head())
"
# Run the Python script in R
py_run_string(spotipy_script)
# Name of the environment
env_name <- "spotify_env"
# Check if the environment already exists
if (!env_name %in% conda_list()$name) {
# If it doesn't exist, create it
conda_create(env_name)
} else {
print(paste("The environment", env_name, "already exists."))
}
library(reticulate)
library(here)
library(dplyr)
library(tidyr)
library(reticulate)
# Create a new Conda environment
conda_create("spotify_env")
library(reticulate)
# Name of the environment
env_name <- "spotify_env"
# Check if the environment already exists
if (!env_name %in% conda_list()$name) {
# If it doesn't exist, create it
conda_create(env_name)
} else {
print(paste("The environment", env_name, "already exists."))
}
update()
source(here::here("src/setup.R"))
library(here)
source(here::here("src/setup.R"))
library(here)
# This should print the absolute path to setup.R
print(here("src", "setup.R"))
# You can also check if the file actually exists at that path
file.exists(here("src", "setup.R"))
library(here)
source(here::here("report/src/setup.R"))
source(here::here("src/setup.R"))
